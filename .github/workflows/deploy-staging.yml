name: Deploy to Staging

on:
  push:
    branches: [feat/effect-mcp]
  workflow_dispatch:

jobs:
  deploy-staging:
    name: Deploy MCP Server to Vercel Staging
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build toolkit (required for MCP server)
        run: bun --filter @effect-patterns/toolkit run build

      - name: Deploy to Vercel (Preview)
        uses: amondnet/vercel-action@v25
        id: vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./services/mcp-server
          scope: ${{ secrets.VERCEL_ORG_ID }}
        env:
          PATTERN_API_KEY: ${{ secrets.STAGING_API_KEY }}
          OTLP_ENDPOINT: ${{ secrets.STAGING_OTLP_ENDPOINT }}
          OTLP_HEADERS: ${{ secrets.STAGING_OTLP_HEADERS }}
          SERVICE_NAME: effect-patterns-mcp-server-staging

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 10

          # Try up to 12 times (2 minutes total)
          for i in {1..12}; do
            if curl -f -s "${{ steps.vercel-deploy.outputs.preview-url }}/api/health" > /dev/null 2>&1; then
              echo "Deployment is ready!"
              exit 0
            fi
            echo "Attempt $i: Not ready yet, waiting..."
            sleep 10
          done

          echo "Deployment failed to become ready"
          exit 1

      - name: Run smoke tests (TypeScript)
        run: |
          cd services/mcp-server
          bun run smoke-test.ts \
            "${{ steps.vercel-deploy.outputs.preview-url }}" \
            "${{ secrets.STAGING_API_KEY }}"

      - name: Comment deployment URL on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Staging Deployment Ready**

              URL: ${{ steps.vercel-deploy.outputs.preview-url }}

              ‚úÖ All smoke tests passed

              **Test the API:**
              \`\`\`bash
              # Health check (no auth)
              curl ${{ steps.vercel-deploy.outputs.preview-url }}/api/health

              # Search patterns (with auth)
              curl -H "x-api-key: YOUR_KEY" \\
                ${{ steps.vercel-deploy.outputs.preview-url }}/api/patterns
              \`\`\`
              `
            })

      - name: Set deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Staging deployment successful"
            echo "URL: ${{ steps.vercel-deploy.outputs.preview-url }}"
          else
            echo "‚ùå Staging deployment failed"
            exit 1
          fi
