**Validation Result:** PASS

**Detailed Findings:**

*   **Global Pattern Rules Adherence:**
    *   PASS: The pattern and code example adhere to the specific rule "Use conditional combinators for control flow." The code correctly demonstrates using `Effect.if` for declarative conditional logic and `Effect.logInfo` for structured logging throughout the program.

*   **Pattern Adherence & Correctness:**
    *   PASS: The TypeScript code (`src/control-flow-with-combinators.ts`) perfectly illustrates the pattern described in the documentation (`published/control-flow-with-combinators.mdx`). The code demonstrates the exact guideline: using `Effect.if` for conditional branching, `Effect.either` for error handling, and maintaining declarative style within Effect compositions.

*   **Idiomatic Effect-TS Usage:**
    *   PASS: Adheres to Effect's current APIs and best practices. Uses `Effect.if`, `Effect.succeed`, `Effect.fail`, `Effect.gen`, `Effect.logInfo`, `Effect.either`, and `Effect.runPromise` correctly. The code follows proper structured logging and demonstrates Effect's conditional combinators effectively.

*   **Idiomatic TypeScript Usage:**
    *   PASS: Clean code structure with appropriate use of `const` declarations and proper function definitions. The conditional logic is well-implemented and demonstrates clear control flow patterns with proper type handling.

*   **Effect API Adherence (MCP Server Check):**
    *   PASS: All Effect APIs used are current as per the API Manifest. `Effect.if`, `Effect.succeed`, `Effect.fail`, `Effect.gen`, `Effect.logInfo`, `Effect.either`, and `Effect.runPromise` are all preferred current APIs for conditional control flow.

**Overall Recommendation:**
This pattern and its associated TypeScript example are production-ready for publication. The code excellently demonstrates conditional combinators with proper declarative control flow, structured logging, and current Effect-TS best practices.
