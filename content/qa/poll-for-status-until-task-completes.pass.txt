**Validation Result:** PASS

**Detailed Findings:**

*   **Global Pattern Rules Adherence:**
    *   PASS: The pattern and code example adhere to the global rule "Leverage Effect's built-in structured logging." The code correctly uses `Effect.log` for all logging operations throughout the program, avoiding direct `console.log` usage and maintaining consistency with Effect's logging paradigm.

*   **Pattern Adherence & Correctness:**
    *   PASS: The TypeScript code (`src/poll-for-status-until-task-completes.ts`) perfectly illustrates the pattern described in the documentation (`published/poll-for-status-until-task-completes.mdx`). The code demonstrates the exact guideline: using `Effect.race` to run a repeating polling effect alongside a main task, automatically stopping the polling when the main task finishes.

*   **Idiomatic Effect-TS Usage:**
    *   PASS: Adheres to Effect's current APIs and best practices. Uses `Effect.log`, `Effect.delay`, `Schedule.fixed`, `Effect.repeat`, `Effect.race`, and `Effect.runPromise` correctly. The code follows proper concurrency patterns and demonstrates Effect's structured concurrency system effectively.

*   **Idiomatic TypeScript Usage:**
    *   PASS: Clean code structure with appropriate use of `const` declarations, proper function composition, and strong typing throughout. The polling patterns are well-implemented with clear demonstration of concurrent task coordination and automatic cleanup capabilities.

*   **Effect API Adherence (MCP Server Check):**
    *   PASS: All Effect APIs used are current as per the API Manifest. `Effect.log`, `Effect.delay`, `Schedule.fixed`, `Effect.repeat`, `Effect.race`, and `Effect.runPromise` are all preferred current APIs for polling and concurrency patterns.

**Overall Recommendation:**
This pattern and its associated TypeScript example are production-ready for publication. The code excellently demonstrates Effect's structured concurrency system with proper usage of racing effects, automatic interruption, and current Effect-TS best practices.
