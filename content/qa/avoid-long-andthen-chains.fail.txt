**Validation Result:** FAIL

**Detailed Findings:**

*   **Global Pattern Rules Adherence:**
    *   FAIL: The pattern violates the global rule "Leverage Effect's built-in structured logging." The code uses a direct `.then()` callback on line 22 instead of using Effect's structured logging system with proper Effect combinators. Additionally, it violates the principle of staying within the Effect ecosystem by using Promise-based `.then()` instead of Effect combinators.

*   **Pattern Adherence & Correctness:**
    *   PASS: The TypeScript code (`src/avoid-long-andthen-chains.ts`) correctly demonstrates the pattern described in the documentation (`published/avoid-long-andthen-chains.mdx`). The code properly shows how to use `Effect.gen` instead of chaining multiple `.andThen` or `.flatMap` calls for better readability.

*   **Idiomatic Effect-TS Usage:**
    *   PARTIAL: While the code correctly uses `Effect.succeed`, `Effect.tap`, `Effect.log`, `Effect.gen`, `Effect.runPromise`, and `Effect.runSync`, it breaks the functional paradigm by using `.then()` callback instead of staying within the Effect ecosystem. The code should use Effect combinators for all operations.

*   **Idiomatic TypeScript Usage:**
    *   PASS: Clean code structure with appropriate use of `const` declarations and proper function definitions. The generator pattern is well-implemented and demonstrates clear sequential logic.

*   **Effect API Adherence (MCP Server Check):**
    *   PASS: All Effect APIs used are current as per the API Manifest. `Effect.succeed`, `Effect.tap`, `Effect.log`, `Effect.gen`, `Effect.runPromise`, and `Effect.runSync` are all preferred current APIs.

**Overall Recommendation:**
Requires revisions to replace the `.then()` callback with Effect combinators to maintain consistency with Effect's functional programming principles and global coding rules. The generator pattern demonstration is correct but needs to follow Effect's paradigm throughout.
