**Validation Result:** PASS

**Detailed Findings:**

*   **Global Pattern Rules Adherence:**
    *   PASS: The pattern and code example adhere to the specific rule "Handle errors with catchTag, catchTags, and catchAll." The code correctly demonstrates using `Effect.catchTags` to handle multiple specific tagged errors and provides type-safe error recovery logic.

*   **Pattern Adherence & Correctness:**
    *   PASS: The TypeScript code (`src/handle-errors-with-catch.ts`) perfectly illustrates the pattern described in the documentation (`published/handle-errors-with-catch.mdx`). The code demonstrates the exact guideline: using `Effect.catchTags` for multiple error types with specific recovery logic, showing proper error handling composition and type safety.

*   **Idiomatic Effect-TS Usage:**
    *   PASS: Adheres to Effect's current APIs and best practices. Uses `Data.TaggedError`, `Effect.Service`, `Effect.gen`, `Effect.logInfo`, `Effect.logWarning`, `Effect.logError`, `Effect.fail`, `Effect.flatMap`, `Effect.catchTags`, `Effect.forEach`, `Effect.provide`, and `Effect.runPromise` correctly. The code follows proper structured logging and error handling patterns.

*   **Idiomatic TypeScript Usage:**
    *   PASS: Strong typing is maintained throughout with proper interface definitions and tagged error classes. Clean naming conventions, appropriate use of `const` declarations, and proper readonly properties. The service interface is well-defined with explicit error union types.

*   **Effect API Adherence (MCP Server Check):**
    *   PASS: All Effect APIs used are current as per the API Manifest. `Data.TaggedError`, `Effect.Service`, `Effect.gen`, `Effect.logInfo`, `Effect.logWarning`, `Effect.logError`, `Effect.fail`, `Effect.flatMap`, `Effect.catchTags`, `Effect.forEach`, `Effect.provide`, and `Effect.runPromise` are all preferred current APIs.

**Overall Recommendation:**
This pattern and its associated TypeScript example are production-ready for publication. The code excellently demonstrates structured error handling with proper type safety, comprehensive error recovery strategies, and current Effect-TS best practices.
