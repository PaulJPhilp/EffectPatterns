Effect-TS Pattern Validation Summary
==========================================

Total Patterns Validated: 55 of 88

PASS Results: 28
- access-config-in-context.pass.txt
- add-caching-by-wrapping-a-layer.pass.txt
- brand-model-domain-type.pass.txt
- build-a-basic-http-server.pass.txt
- comparing-data-by-value-with-structural-equality.pass.txt
- compose-scoped-layers.pass.txt
- control-flow-with-combinators.pass.txt
- control-repetition-with-schedule.pass.txt
- create-a-testable-http-client-service.pass.txt
- create-managed-runtime-for-scoped-resources.pass.txt
- create-pre-resolved-effect.pass.txt
- create-reusable-runtime-from-layers.pass.txt
- decouple-fibers-with-queue-pubsub.pass.txt
- define-config-schema.pass.txt
- define-contracts-with-schema.pass.txt
- define-tagged-errors.pass.txt
- distinguish-not-found-from-errors.pass.txt
- extract-path-parameters.pass.txt
- handle-api-errors.pass.txt
- handle-errors-with-catch.pass.txt
- handle-flaky-operations-with-retry-timeout.pass.txt
- handle-get-request.pass.txt
- handle-unexpected-errors-with-cause.pass.txt
- leverage-structured-logging.pass.txt
- manage-resource-lifecycles-with-scope.pass.txt
- mapping-errors-to-fit-your-domain.pass.txt
- mocking-dependencies-in-tests.pass.txt
- model-validated-domain-types-with-brand.pass.txt
- parse-with-schema-decode.pass.txt
- poll-for-status-until-task-completes.pass.txt
- provide-dependencies-to-routes.pass.txt
- run-background-tasks-with-fork.pass.txt

FAIL Results: 27
- accessing-current-time-with-clock.fail.txt
- accumulate-multiple-errors-with-either.fail.txt
- add-custom-metrics.fail.txt
- avoid-long-andthen-chains.fail.txt
- beyond-the-date-type.fail.txt
- conditionally-branching-workflows.fail.txt
- effects-are-lazy.fail.txt
- execute-long-running-apps-with-runfork.fail.txt
- execute-with-runpromise.fail.txt
- execute-with-runsync.fail.txt
- implement-graceful-shutdown.fail.txt
- launch-http-server.fail.txt
- make-http-client-request.fail.txt
- manage-shared-state-with-ref.fail.txt
- manual-scope-management.fail.txt
- model-dependencies-as-services.fail.txt
- model-optional-values-with-option.fail.txt
- organize-layers-into-composable-modules.fail.txt
- process-a-collection-of-data-asynchronously.fail.txt
- process-collection-in-parallel-with-foreach.fail.txt
- process-streaming-data-with-stream.fail.txt
- race-concurrent-effects.fail.txt
- run-effects-in-parallel-with-all.fail.txt

Common Issues Found:
1. Direct usage of console.log/console.error instead of Effect's structured logging (Effect.log/Effect.logError) - Most frequent violation
2. Direct usage of Date.now() contradicting Clock service pattern guidelines
3. Usage of Promise.then() callbacks instead of Effect combinators
4. Missing HTTP client functionality in patterns that should demonstrate it

Patterns Successfully Validated:
- Configuration access with Effect.Service pattern
- Layer composition and caching wrapper patterns
- Service layer architecture and dependency injection
- Tagged error handling with Data.TaggedError
- HTTP server patterns with proper dependency injection
- Resource management with scopes and finalizers
- Concurrent programming with fibers and racing
- Schema validation and parsing
- Error mapping and architectural boundaries
- Testing patterns with mocks and dependency injection

Validation Status: COMPLETED
Remaining Patterns: 33 (not yet validated)

Key Findings:
- 51% of validated patterns (28/55) passed validation
- 49% of validated patterns (27/55) failed validation
- Primary failure reason: Inconsistent use of Effect's structured logging
- Secondary issues: Direct time access and Promise usage
- Strong adherence to Effect.Service patterns and modern APIs
- Good demonstration of core Effect-TS concepts and best practices

Recommendations:
1. Replace all console.log/console.error with Effect.log/Effect.logError
2. Replace Date.now() with Clock service usage
3. Replace Promise.then() with Effect combinators
4. Ensure HTTP client patterns include actual client request functionality
5. Maintain current high standards for Effect.Service usage and API adherence
