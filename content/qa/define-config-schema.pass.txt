**Validation Result:** PASS

**Detailed Findings:**

*   **Global Pattern Rules Adherence:**
    *   PASS: The pattern and code example adhere to the specific rule "Define a type-safe configuration schema." The code correctly demonstrates using `Config.nested`, `Config.all`, `Config.string`, `Config.number`, `ConfigProvider.fromMap`, `Layer.setConfigProvider`, and `Effect.logInfo` for structured logging throughout the program.

*   **Pattern Adherence & Correctness:**
    *   PASS: The TypeScript code (`src/define-config-schema.ts`) perfectly illustrates the pattern described in the documentation (`published/define-config-schema.mdx`). The code demonstrates the exact guideline: defining configuration schema with Effect.Config primitives, using nested configuration, and proper type-safe configuration access.

*   **Idiomatic Effect-TS Usage:**
    *   PASS: Adheres to Effect's current APIs and best practices. Uses `Config.nested`, `Config.all`, `Config.string`, `Config.number`, `Effect.gen`, `Effect.logInfo`, `ConfigProvider.fromMap`, `Layer.setConfigProvider`, `Effect.provide`, and `Effect.runPromise` correctly. The code follows proper structured logging and demonstrates Effect's configuration management effectively.

*   **Idiomatic TypeScript Usage:**
    *   PASS: Clean code structure with appropriate use of `const` declarations, proper configuration schema definition, and strong typing throughout. The configuration management patterns are well-implemented with proper type safety and clear structure.

*   **Effect API Adherence (MCP Server Check):**
    *   PASS: All Effect APIs used are current as per the API Manifest. `Config.nested`, `Config.all`, `Config.string`, `Config.number`, `Effect.gen`, `Effect.logInfo`, `ConfigProvider.fromMap`, `Layer.setConfigProvider`, `Effect.provide`, and `Effect.runPromise` are all preferred current APIs for configuration schema patterns.

**Overall Recommendation:**
This pattern and its associated TypeScript example are production-ready for publication. The code excellently demonstrates type-safe configuration schema definition with proper configuration management, structured logging, and current Effect-TS best practices.
