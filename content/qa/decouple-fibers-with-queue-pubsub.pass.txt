**Validation Result:** PASS

**Detailed Findings:**

*   **Global Pattern Rules Adherence:**
    *   PASS: The pattern and code example adhere to the specific rule "Use Queue for point-to-point work distribution and PubSub for broadcast messaging between fibers." The code correctly demonstrates using `Queue.bounded`, `Queue.offer`, `Queue.take`, `Effect.fork`, `Fiber.interrupt`, and `Effect.logInfo` for structured logging throughout the program.

*   **Pattern Adherence & Correctness:**
    *   PASS: The TypeScript code (`src/decouple-fibers-with-queue-pubsub.ts`) perfectly illustrates the pattern described in the documentation (`published/decouple-fibers-with-queue-pubsub.mdx`). The code demonstrates the exact guideline: using Queue for producer-consumer patterns, proper fiber management with fork and interrupt, and decoupled communication between concurrent fibers.

*   **Idiomatic Effect-TS Usage:**
    *   PASS: Adheres to Effect's current APIs and best practices. Uses `Effect.gen`, `Effect.logInfo`, `Queue.bounded`, `Queue.offer`, `Queue.take`, `Effect.sleep`, `Effect.fork`, `Fiber.interrupt`, and `Effect.runPromise` correctly. The code follows proper structured logging and demonstrates Effect's concurrent programming patterns effectively.

*   **Idiomatic TypeScript Usage:**
    *   PASS: Clean code structure with appropriate use of `const` declarations, proper while loops for continuous processing, and strong typing throughout. The concurrent programming patterns are well-implemented with proper resource management and fiber lifecycle handling.

*   **Effect API Adherence (MCP Server Check):**
    *   PASS: All Effect APIs used are current as per the API Manifest. `Effect.gen`, `Effect.logInfo`, `Queue.bounded`, `Queue.offer`, `Queue.take`, `Effect.sleep`, `Effect.fork`, `Fiber.interrupt`, and `Effect.runPromise` are all preferred current APIs for queue-based fiber decoupling patterns.

**Overall Recommendation:**
This pattern and its associated TypeScript example are production-ready for publication. The code excellently demonstrates fiber decoupling with queues, proper concurrent programming patterns, structured logging, and current Effect-TS best practices.
