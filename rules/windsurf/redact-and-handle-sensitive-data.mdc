description: Use Redacted to wrap sensitive values, preventing accidental exposure in logs or error messages.
globs: "**/*.ts"
alwaysApply: true

# Redact and Handle Sensitive Data
**Rule:** Use Redacted to wrap sensitive values, preventing accidental exposure in logs or error messages.

### Example
```typescript
import { Redacted } from "effect";

// Wrap a sensitive value
const secret = Redacted.make("super-secret-password");

// Use the secret in your application logic
function authenticate(user: string, password: Redacted.Redacted<string>) {
  // ... authentication logic
}

// Logging or stringifying a Redacted value
console.log(`Password: ${secret}`); // Output: Password: <redacted>
console.log(String(secret)); // Output: <redacted>

```

**Explanation:**  
- `Redacted.make(value)` wraps a sensitive value.
- When logged or stringified, the value is replaced with `<redacted>`.
- Prevents accidental exposure of secrets in logs or error messages.

### Anti-Pattern (Avoid)
Passing sensitive data as plain strings, which can be accidentally logged, serialized, or leaked in error messages.

**Explanation:**  
Sensitive data should never appear in logs, traces, or error messages.  
`Redacted` provides a type-safe way to mark and protect secrets throughout your application.
